{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valik\\\\react-apps\\\\cs\\\\lab2-1\\\\src\\\\components\\\\Main.js\";\nimport React from 'react';\nimport Form from './Form';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { encryptAES_CBC, decryptAES_CBC } from './AESUtils';\nimport FileForm from './FileForm';\n\nconst NodeRSA = require('node-rsa');\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    const key = new NodeRSA().generateKeyPair(512);\n    key.setOptions({\n      encryptionScheme: 'pkcs1'\n    });\n    this.state = {\n      loggedUser: {\n        login: \"\",\n        password: \"\"\n      },\n      file: {\n        fileName: null,\n        content: null\n      },\n      publicKey: null,\n      privateKey: null,\n      token: null,\n      iv: null,\n      rsa: key,\n      loggedIn: false\n    };\n  }\n\n  async onSubmit() {\n    const publicKey = this.state.publicKey;\n\n    if (publicKey) {\n      const body = {\n        key: publicKey\n      };\n      const response = await fetch(\"http://localhost:9001/auth/token/request\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      const json = await response.json();\n      console.log(\"Successfully requested encrypted token\");\n      const token = json.token;\n      const iv = json.iv;\n      const decryptedToken = this.decryptToken(token, iv);\n      console.log(\"Successfully decrypted token\");\n      this.setState({\n        token: decryptedToken.token,\n        iv: decryptedToken.iv\n      });\n      const authData = this.encryptLoginAndPassword();\n      console.log(\"Successfully encrypted creds\");\n      const authResponse = await fetch(\"http://localhost:9001/api/auth\", {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify(authData)\n      });\n      const responseCode = authResponse.status;\n\n      if (responseCode === 200) {\n        this.setState({\n          loggedIn: true\n        });\n      }\n\n      console.log(\"Login finished with \" + responseCode + \" code\");\n    } else {\n      alert('No public key generated');\n    }\n  }\n\n  generateKeys() {\n    const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\n    const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\n    this.setState({\n      publicKey: publicKey,\n      privateKey: privateKey\n    });\n  }\n\n  decryptToken(token, iv) {\n    const decryptedToken = {\n      token: this.state.rsa.decrypt(token, 'utf8'),\n      iv: this.state.rsa.decrypt(iv, 'utf8')\n    };\n    return decryptedToken;\n  }\n\n  handleValueChange(event) {\n    event.preventDefault();\n    const inputName = event.target.name;\n    const inputValue = event.target.value;\n    const user = this.state.loggedUser;\n    user[inputName] = inputValue;\n    console.log(inputName + \": \" + user[inputName]);\n    this.setState({\n      loggedUser: user\n    });\n  }\n\n  handleFileNameChange(event) {\n    event.preventDefault();\n    const inputName = event.target.name;\n    const inputValue = event.target.value;\n    let file = this.state.file;\n    file[inputName] = inputValue;\n    this.setState({\n      file: file\n    });\n  }\n\n  encryptLoginAndPassword() {\n    let login = this.state.loggedUser.login;\n    let password = this.state.loggedUser.password;\n    let key = this.state.token;\n    let iv = this.state.iv;\n    login = encryptAES_CBC(key, iv, login);\n    password = encryptAES_CBC(key, iv, password);\n    const encryptedCreds = {\n      login: login,\n      password: password\n    };\n    return encryptedCreds;\n  }\n\n  async fetchFile(fileName) {\n    const body = {\n      fileName: this.encryptAES(fileName)\n    };\n    const response = await fetch(\"http://localhost:9001/api/get/file\", {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify(body)\n    });\n    const json = await response.json();\n    const text = json.text;\n    const decr = this.decryptAES(text);\n    let file = this.state.file;\n    file.content = decr;\n    this.setState({\n      file: file\n    });\n  }\n\n  decryptAES(text) {\n    let key = this.state.token;\n    let iv = this.state.iv;\n    const dect = decryptAES_CBC(key, iv, text);\n    return dect;\n  }\n\n  encryptAES(text) {\n    let key = this.state.token;\n    let iv = this.state.iv;\n    const encr = encryptAES_CBC(key, iv, text);\n    return encr;\n  }\n\n  render() {\n    const rsaPublicKey = this.state.publicKey;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, this.state.loggedIn ? React.createElement(Redirect, {\n      to: \"/form/file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"py-5 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Secure database for text files\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Authorization\")), React.createElement(Form, {\n      onBlur: event => this.handleValueChange(event),\n      onSubmit: () => this.onSubmit(),\n      getKeys: () => this.generateKeys(),\n      rsaKey: rsaPublicKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }))), React.createElement(Route, {\n      path: \"/form/file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"py-5 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Secure database for text files\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Requesting file\")), React.createElement(FileForm, {\n      file: this.state.file,\n      onBlur: event => this.handleFileNameChange(event),\n      onSubmit: filename => this.fetchFile(filename),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }))))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/valik/react-apps/cs/lab2-1/src/components/Main.js"],"names":["React","Form","Switch","Route","Redirect","encryptAES_CBC","decryptAES_CBC","FileForm","NodeRSA","require","Main","Component","constructor","props","key","generateKeyPair","setOptions","encryptionScheme","state","loggedUser","login","password","file","fileName","content","publicKey","privateKey","token","iv","rsa","loggedIn","onSubmit","body","response","fetch","method","headers","JSON","stringify","json","console","log","decryptedToken","decryptToken","setState","authData","encryptLoginAndPassword","authResponse","responseCode","status","alert","generateKeys","exportKey","decrypt","handleValueChange","event","preventDefault","inputName","target","name","inputValue","value","user","handleFileNameChange","encryptedCreds","fetchFile","encryptAES","text","decr","decryptAES","dect","encr","render","rsaPublicKey","filename"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from './Form';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { encryptAES_CBC, decryptAES_CBC } from './AESUtils'\r\nimport FileForm from './FileForm';\r\n\r\nconst NodeRSA = require('node-rsa');\r\n\r\n\r\nexport default class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const key = new NodeRSA().generateKeyPair(512)\r\n        key.setOptions({ encryptionScheme: 'pkcs1' });\r\n\r\n        this.state = {\r\n            loggedUser: {\r\n                login: \"\",\r\n                password: \"\",\r\n            },\r\n            file: {\r\n                fileName: null,\r\n                content: null,\r\n            },\r\n            publicKey: null,\r\n            privateKey: null,\r\n            token: null,\r\n            iv: null,\r\n            rsa: key,\r\n            loggedIn: false\r\n        }\r\n    }\r\n\r\n    async onSubmit() {\r\n\r\n        const publicKey = this.state.publicKey;\r\n        if (publicKey) {\r\n\r\n            const body = {\r\n                key: publicKey\r\n            };\r\n\r\n            const response = await fetch(\"http://localhost:9001/auth/token/request\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            console.log(\"Successfully requested encrypted token\");\r\n\r\n            const token = json.token;\r\n            const iv = json.iv;\r\n\r\n            const decryptedToken = this.decryptToken(token, iv);\r\n\r\n            console.log(\"Successfully decrypted token\");\r\n\r\n            this.setState({\r\n                token: decryptedToken.token,\r\n                iv: decryptedToken.iv\r\n            });\r\n\r\n            const authData = this.encryptLoginAndPassword();\r\n\r\n            console.log(\"Successfully encrypted creds\");\r\n\r\n            const authResponse = await fetch(\"http://localhost:9001/api/auth\", {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                method: \"POST\",\r\n                body: JSON.stringify(authData)\r\n            })\r\n\r\n            const responseCode = authResponse.status\r\n\r\n            if (responseCode === 200) {\r\n                this.setState({\r\n                    loggedIn: true\r\n                });\r\n            }\r\n\r\n            console.log(\"Login finished with \" + responseCode + \" code\")\r\n\r\n        } else {\r\n            alert('No public key generated');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    generateKeys() {\r\n\r\n        const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\r\n        const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\r\n\r\n        this.setState({\r\n            publicKey: publicKey,\r\n            privateKey: privateKey\r\n        })\r\n    }\r\n\r\n    decryptToken(token, iv) {\r\n        const decryptedToken = {\r\n            token: this.state.rsa.decrypt(token, 'utf8'),\r\n            iv: this.state.rsa.decrypt(iv, 'utf8')\r\n        }\r\n\r\n        return decryptedToken;\r\n    }\r\n\r\n    handleValueChange(event) {\r\n        event.preventDefault();\r\n        const inputName = event.target.name;\r\n        const inputValue = event.target.value;\r\n\r\n        const user = this.state.loggedUser;\r\n\r\n        user[inputName] = inputValue;\r\n\r\n        console.log(inputName + \": \" + user[inputName])\r\n\r\n        this.setState({\r\n            loggedUser: user\r\n        });\r\n    }\r\n\r\n    handleFileNameChange(event) {\r\n        event.preventDefault();\r\n        const inputName = event.target.name;\r\n        const inputValue = event.target.value;\r\n\r\n        let file = this.state.file;\r\n\r\n        file[inputName] = inputValue;\r\n\r\n        this.setState({\r\n            file: file\r\n        });\r\n    }\r\n\r\n    encryptLoginAndPassword() {\r\n        let login = this.state.loggedUser.login;\r\n        let password = this.state.loggedUser.password;\r\n        let key = this.state.token;\r\n        let iv = this.state.iv;\r\n\r\n        login = encryptAES_CBC(key, iv, login);\r\n        password = encryptAES_CBC(key, iv, password);\r\n\r\n        const encryptedCreds = {\r\n            login: login,\r\n            password: password\r\n        };\r\n\r\n        return encryptedCreds;\r\n    }\r\n\r\n    async fetchFile(fileName) {\r\n\r\n        const body = {\r\n            fileName: this.encryptAES(fileName)\r\n        }\r\n\r\n        const response = await fetch(\"http://localhost:9001/api/get/file\", {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify(body)\r\n        })\r\n\r\n        const json = await response.json();\r\n\r\n        const text = json.text;\r\n\r\n        const decr = this.decryptAES(text);\r\n\r\n        let file = this.state.file;\r\n        file.content = decr;\r\n\r\n        this.setState({\r\n            file: file\r\n        });\r\n\r\n    }\r\n\r\n    decryptAES(text) {\r\n\r\n        let key = this.state.token;\r\n        let iv = this.state.iv;\r\n\r\n        const dect = decryptAES_CBC(key, iv, text)\r\n\r\n        return dect;\r\n    }\r\n\r\n    encryptAES(text) {\r\n\r\n        let key = this.state.token;\r\n        let iv = this.state.iv;\r\n\r\n        const encr = encryptAES_CBC(key, iv, text);\r\n\r\n        return encr;\r\n    }\r\n\r\n    render() {\r\n\r\n        const rsaPublicKey = this.state.publicKey;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n\r\n                <div className=\"row\">\r\n\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            {\r\n                                this.state.loggedIn ? <Redirect to=\"/form/file\" /> :\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"py-5 text-center\">\r\n                                            <h2>Secure database for text files</h2>\r\n                                            <p className=\"lead\">Authorization</p>\r\n                                        </div>\r\n                                        <Form\r\n                                            onBlur={(event) => this.handleValueChange(event)}\r\n                                            onSubmit={() => this.onSubmit()}\r\n                                            getKeys={() => this.generateKeys()}\r\n                                            rsaKey={rsaPublicKey}/>\r\n                                    </div>\r\n                            }\r\n                        </Route>\r\n                        <Route path=\"/form/file\">\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"py-5 text-center\">\r\n                                    <h2>Secure database for text files</h2>\r\n                                    <p className=\"lead\">Requesting file</p>\r\n                                </div>\r\n                                <FileForm\r\n                                    file={this.state.file}\r\n                                    onBlur={(event) => this.handleFileNameChange(event)}\r\n                                    onSubmit={(filename) => this.fetchFile(filename)}\r\n                                />\r\n                            </div></Route>\r\n                    </Switch>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}