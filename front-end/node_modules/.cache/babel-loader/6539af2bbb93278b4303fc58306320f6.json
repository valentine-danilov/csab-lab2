{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valik\\\\react-apps\\\\cs\\\\lab2-1\\\\src\\\\components\\\\Main.js\";\nimport React from 'react';\nimport Form from './Form';\nimport { encryptAES_CBC } from './AESUtils';\n\nconst NodeRSA = require('node-rsa');\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    const key = new NodeRSA().generateKeyPair(512);\n    key.setOptions({\n      encryptionScheme: 'pkcs1'\n    });\n    this.state = {\n      login: \"admin\",\n      password: '',\n      publicKey: null,\n      privateKey: null,\n      token: null,\n      rsa: key\n    };\n  }\n\n  async onSubmit(event) {\n    event.preventDefault();\n    const publicKey = this.state.publicKey;\n\n    if (publicKey) {\n      const body = {\n        key: publicKey\n      };\n      const response = await fetch(\"http://localhost:9000/auth/token/request\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      const json = await response.json();\n      alert(\"Successfully requested encrypted token\");\n      const token = json.token;\n      const decryptedToken = this.decryptToken(token);\n      alert(\"Successfully decrypted token\");\n      this.setState({\n        token: decryptedToken\n      });\n    } else {\n      alert('No public key generated');\n    }\n  }\n\n  generateKeys() {\n    const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\n    const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\n    this.setState({\n      publicKey: publicKey,\n      privateKey: privateKey\n    });\n  }\n\n  decryptToken(token) {\n    return this.state.rsa.decrypt(token, 'utf8');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.publicKey), React.createElement(Form, {\n      onSubmit: () => this.onSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.generateKeys(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Generate Keys\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/valik/react-apps/cs/lab2-1/src/components/Main.js"],"names":["React","Form","encryptAES_CBC","NodeRSA","require","Main","Component","constructor","props","key","generateKeyPair","setOptions","encryptionScheme","state","login","password","publicKey","privateKey","token","rsa","onSubmit","event","preventDefault","body","response","fetch","method","headers","JSON","stringify","json","alert","decryptedToken","decryptToken","setState","generateKeys","exportKey","decrypt","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAGA,eAAe,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,UAAMC,GAAG,GAAG,IAAIN,OAAJ,GAAcO,eAAd,CAA8B,GAA9B,CAAZ;AACAD,IAAAA,GAAG,CAACE,UAAJ,CAAe;AAAEC,MAAAA,gBAAgB,EAAE;AAApB,KAAf;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,OADE;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTC,MAAAA,SAAS,EAAE,IAHF;AAITC,MAAAA,UAAU,EAAE,IAJH;AAKTC,MAAAA,KAAK,EAAE,IALE;AAMTC,MAAAA,GAAG,EAAEV;AANI,KAAb;AAQH;;AAED,QAAMW,QAAN,CAAeC,KAAf,EAAsB;AAElBA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMN,SAAS,GAAG,KAAKH,KAAL,CAAWG,SAA7B;;AACA,QAAIA,SAAJ,EAAe;AAEX,YAAMO,IAAI,GAAG;AACTd,QAAAA,GAAG,EAAEO;AADI,OAAb;AAIA,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA6C;AACrEC,QAAAA,MAAM,EAAE,MAD6D;AAErEC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF4D;AAKrEJ,QAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAL+D,OAA7C,CAA5B;AAQA,YAAMO,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;AAEAC,MAAAA,KAAK,CAAC,wCAAD,CAAL;AAEA,YAAMb,KAAK,GAAGY,IAAI,CAACZ,KAAnB;AAEA,YAAMc,cAAc,GAAG,KAAKC,YAAL,CAAkBf,KAAlB,CAAvB;AAEAa,MAAAA,KAAK,CAAC,8BAAD,CAAL;AAIA,WAAKG,QAAL,CAAc;AACVhB,QAAAA,KAAK,EAAEc;AADG,OAAd;AAMH,KAhCD,MAgCO;AACHD,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;AAEJ;;AAEDI,EAAAA,YAAY,GAAG;AAEX,UAAMnB,SAAS,GAAG,KAAKH,KAAL,CAAWM,GAAX,CAAeiB,SAAf,CAAyB,kBAAzB,CAAlB;AACA,UAAMnB,UAAU,GAAG,KAAKJ,KAAL,CAAWM,GAAX,CAAeiB,SAAf,CAAyB,mBAAzB,CAAnB;AAEA,SAAKF,QAAL,CAAc;AACVlB,MAAAA,SAAS,EAAEA,SADD;AAEVC,MAAAA,UAAU,EAAEA;AAFF,KAAd;AAIH;;AAEDgB,EAAAA,YAAY,CAACf,KAAD,EAAQ;AAChB,WAAO,KAAKL,KAAL,CAAWM,GAAX,CAAekB,OAAf,CAAuBnB,KAAvB,EAA8B,MAA9B,CAAP;AACH;;AAKDoB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKzB,KAAL,CAAWG,SAAf,CADJ,EAEI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,MAAM,KAAKI,QAAL,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,MAAM,KAAKe,YAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHJ,CADJ;AAOH;;AAtF6C","sourcesContent":["import React from 'react'\r\nimport Form from './Form';\r\nimport { encryptAES_CBC } from './AESUtils'\r\n\r\nconst NodeRSA = require('node-rsa');\r\n\r\n\r\nexport default class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const key = new NodeRSA().generateKeyPair(512)\r\n        key.setOptions({ encryptionScheme: 'pkcs1' });\r\n\r\n        this.state = {\r\n            login: \"admin\",\r\n            password: '',\r\n            publicKey: null,\r\n            privateKey: null,\r\n            token: null,\r\n            rsa: key\r\n        }\r\n    }\r\n\r\n    async onSubmit(event) {\r\n\r\n        event.preventDefault();\r\n\r\n        const publicKey = this.state.publicKey;\r\n        if (publicKey) {\r\n\r\n            const body = {\r\n                key: publicKey\r\n            };\r\n\r\n            const response = await fetch(\"http://localhost:9000/auth/token/request\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            alert(\"Successfully requested encrypted token\");\r\n\r\n            const token = json.token;\r\n\r\n            const decryptedToken = this.decryptToken(token);\r\n\r\n            alert(\"Successfully decrypted token\");\r\n\r\n            \r\n\r\n            this.setState({\r\n                token: decryptedToken\r\n            });\r\n\r\n            \r\n\r\n        } else {\r\n            alert('No public key generated');\r\n        }\r\n\r\n    }\r\n\r\n    generateKeys() {\r\n\r\n        const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\r\n        const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\r\n\r\n        this.setState({\r\n            publicKey: publicKey,\r\n            privateKey: privateKey\r\n        })\r\n    }\r\n\r\n    decryptToken(token) {\r\n        return this.state.rsa.decrypt(token, 'utf8');\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.state.publicKey}</p>\r\n                <Form onSubmit={() => this.onSubmit()} />\r\n                <button type=\"button\" onClick={() => this.generateKeys()}>Generate Keys</button>\r\n            </div >\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}