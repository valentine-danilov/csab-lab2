{"ast":null,"code":"const CryptoJS = require(\"crypto-js\");\n\nexport function encryptAES_CBC(key, iv, source) {\n  const keyBytes = CryptoJS.enc.Base64.parse(key);\n  const ivBytes = CryptoJS.enc.Base64.parse(iv);\n  let encryptedSource = CryptoJS.AES.encrypt(source, keyBytes, {\n    iv: ivBytes,\n    padding: CryptoJS.pad.Pkcs7,\n    mode: CryptoJS.mode.CBC\n  });\n  return encryptedSource.toString();\n}\nexport function decryptAES_CBC(key, iv, enc) {\n  const keyBytes = CryptoJS.enc.Base64.parse(key);\n  const ivBytes = CryptoJS.enc.Base64.parse(iv);\n  /* const encBytes = CryptoJS.enc.Base64.parse(enc) */\n\n  let decrypted = CryptoJS.AES.decrypt({\n    ciphertext: CryptoJS.enc.Base64.parse(enc),\n    salt: \"\"\n  }, keyBytes, {\n    iv: ivBytes,\n    padding: CryptoJS.pad.Pkcs7,\n    mode: CryptoJS.mode.CBC\n  });\n  return decrypted.toString();\n}","map":{"version":3,"sources":["C:/Users/valik/react-apps/cs/lab2-1/src/components/AESUtils.js"],"names":["CryptoJS","require","encryptAES_CBC","key","iv","source","keyBytes","enc","Base64","parse","ivBytes","encryptedSource","AES","encrypt","padding","pad","Pkcs7","mode","CBC","toString","decryptAES_CBC","decrypted","decrypt","ciphertext","salt"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AAEA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,EAA7B,EAAiCC,MAAjC,EAAyC;AAE5C,QAAMC,QAAQ,GAAGN,QAAQ,CAACO,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BN,GAA1B,CAAjB;AACA,QAAMO,OAAO,GAAGV,QAAQ,CAACO,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BL,EAA1B,CAAhB;AAEA,MAAIO,eAAe,GAAGX,QAAQ,CAACY,GAAT,CAAaC,OAAb,CAAqBR,MAArB,EAA6BC,QAA7B,EAAuC;AACzDF,IAAAA,EAAE,EAAEM,OADqD;AAEzDI,IAAAA,OAAO,EAAEd,QAAQ,CAACe,GAAT,CAAaC,KAFmC;AAGzDC,IAAAA,IAAI,EAAEjB,QAAQ,CAACiB,IAAT,CAAcC;AAHqC,GAAvC,CAAtB;AAMA,SAAOP,eAAe,CAACQ,QAAhB,EAAP;AACH;AAED,OAAO,SAASC,cAAT,CAAwBjB,GAAxB,EAA6BC,EAA7B,EAAiCG,GAAjC,EAAsC;AAEzC,QAAMD,QAAQ,GAAGN,QAAQ,CAACO,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BN,GAA1B,CAAjB;AACA,QAAMO,OAAO,GAAGV,QAAQ,CAACO,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BL,EAA1B,CAAhB;AACA;;AAEA,MAAIiB,SAAS,GAAGrB,QAAQ,CAACY,GAAT,CAAaU,OAAb,CACZ;AACIC,IAAAA,UAAU,EAAEvB,QAAQ,CAACO,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BF,GAA1B,CADhB;AAEIiB,IAAAA,IAAI,EAAE;AAFV,GADY,EAKZlB,QALY,EAMZ;AACIF,IAAAA,EAAE,EAAEM,OADR;AAEII,IAAAA,OAAO,EAAEd,QAAQ,CAACe,GAAT,CAAaC,KAF1B;AAGIC,IAAAA,IAAI,EAAEjB,QAAQ,CAACiB,IAAT,CAAcC;AAHxB,GANY,CAAhB;AAYA,SAAOG,SAAS,CAACF,QAAV,EAAP;AAEH","sourcesContent":["const CryptoJS = require(\"crypto-js\");\r\n\r\nexport function encryptAES_CBC(key, iv, source) {\r\n\r\n    const keyBytes = CryptoJS.enc.Base64.parse(key)\r\n    const ivBytes = CryptoJS.enc.Base64.parse(iv)\r\n\r\n    let encryptedSource = CryptoJS.AES.encrypt(source, keyBytes, {\r\n        iv: ivBytes,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n        mode: CryptoJS.mode.CBC\r\n    })\r\n\r\n    return encryptedSource.toString();\r\n}\r\n\r\nexport function decryptAES_CBC(key, iv, enc) {\r\n\r\n    const keyBytes = CryptoJS.enc.Base64.parse(key)\r\n    const ivBytes = CryptoJS.enc.Base64.parse(iv)\r\n    /* const encBytes = CryptoJS.enc.Base64.parse(enc) */\r\n\r\n    let decrypted = CryptoJS.AES.decrypt(\r\n        {\r\n            ciphertext: CryptoJS.enc.Base64.parse(enc),\r\n            salt: \"\"\r\n        },\r\n        keyBytes,\r\n        {\r\n            iv: ivBytes,\r\n            padding: CryptoJS.pad.Pkcs7,\r\n            mode: CryptoJS.mode.CBC\r\n        })\r\n\r\n    return decrypted.toString();\r\n\r\n}"]},"metadata":{},"sourceType":"module"}