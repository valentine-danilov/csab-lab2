{"ast":null,"code":"var _ = require('../utils')._;\n\nfunction formatParse(format) {\n  format = format.split('-');\n  var keyType = 'private';\n  var keyOpt = {\n    type: 'default'\n  };\n\n  for (var i = 1; i < format.length; i++) {\n    if (format[i]) {\n      switch (format[i]) {\n        case 'public':\n          keyType = format[i];\n          break;\n\n        case 'private':\n          keyType = format[i];\n          break;\n\n        case 'pem':\n          keyOpt.type = format[i];\n          break;\n\n        case 'der':\n          keyOpt.type = format[i];\n          break;\n      }\n    }\n  }\n\n  return {\n    scheme: format[0],\n    keyType: keyType,\n    keyOpt: keyOpt\n  };\n}\n\nmodule.exports = {\n  pkcs1: require('./pkcs1'),\n  pkcs8: require('./pkcs8'),\n  components: require('./components'),\n  isPrivateExport: function (format) {\n    return module.exports[format] && typeof module.exports[format].privateExport === 'function';\n  },\n  isPrivateImport: function (format) {\n    return module.exports[format] && typeof module.exports[format].privateImport === 'function';\n  },\n  isPublicExport: function (format) {\n    return module.exports[format] && typeof module.exports[format].publicExport === 'function';\n  },\n  isPublicImport: function (format) {\n    return module.exports[format] && typeof module.exports[format].publicImport === 'function';\n  },\n  detectAndImport: function (key, data, format) {\n    if (format === undefined) {\n      for (var scheme in module.exports) {\n        if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {\n          return true;\n        }\n      }\n    } else if (format) {\n      var fmt = formatParse(format);\n\n      if (module.exports[fmt.scheme]) {\n        if (fmt.keyType === 'private') {\n          module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);\n        } else {\n          module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);\n        }\n      } else {\n        throw Error('Unsupported key format');\n      }\n    }\n\n    return false;\n  },\n  detectAndExport: function (key, format) {\n    if (format) {\n      var fmt = formatParse(format);\n\n      if (module.exports[fmt.scheme]) {\n        if (fmt.keyType === 'private') {\n          if (!key.isPrivate()) {\n            throw Error(\"This is not private key\");\n          }\n\n          return module.exports[fmt.scheme].privateExport(key, fmt.keyOpt);\n        } else {\n          if (!key.isPublic()) {\n            throw Error(\"This is not public key\");\n          }\n\n          return module.exports[fmt.scheme].publicExport(key, fmt.keyOpt);\n        }\n      } else {\n        throw Error('Unsupported key format');\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}