{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valik\\\\react-apps\\\\cs\\\\lab2-1\\\\src\\\\components\\\\Main.js\";\nimport React from 'react';\nimport Form from './Form';\n\nconst NodeRSA = require('node-rsa');\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    const key = new NodeRSA().generateKeyPair(512);\n    key.setOptions({\n      encryptionScheme: 'pkcs1'\n    });\n    this.state = {\n      publicKey: null,\n      privateKey: null,\n      token: null,\n      rsa: key\n    };\n  }\n\n  async onSubmit() {\n    const publicKey = this.state.publicKey;\n\n    if (publicKey) {\n      const body = {\n        key: publicKey\n      };\n      const response = await fetch(\"http://localhost:9000/auth/token/request\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      const json = await response.json();\n      const token = json.token;\n      const decryptedToken = this.decryptToken(token);\n      console.log(decryptedToken);\n      this.setState({\n        token: decryptedToken\n      });\n    } else {\n      alert('No public key generated');\n    }\n  }\n\n  generateKeys() {\n    const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\n    const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\n    this.setState({\n      publicKey: publicKey,\n      privateKey: privateKey\n    });\n  }\n\n  decryptToken(token) {\n    return this.state.rsa.decryptPublic(token, 'utf8');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.publicKey), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.token), React.createElement(Form, {\n      onSubmit: () => this.onSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.generateKeys(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Generate Keys\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/valik/react-apps/cs/lab2-1/src/components/Main.js"],"names":["React","Form","NodeRSA","require","Main","Component","constructor","props","key","generateKeyPair","setOptions","encryptionScheme","state","publicKey","privateKey","token","rsa","onSubmit","body","response","fetch","method","headers","JSON","stringify","json","decryptedToken","decryptToken","console","log","setState","alert","generateKeys","exportKey","decryptPublic","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAGA,eAAe,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,UAAMC,GAAG,GAAG,IAAIN,OAAJ,GAAcO,eAAd,CAA8B,GAA9B,CAAZ;AACAD,IAAAA,GAAG,CAACE,UAAJ,CAAe;AAACC,MAAAA,gBAAgB,EAAE;AAAnB,KAAf;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,IADF;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,KAAK,EAAE,IAHE;AAITC,MAAAA,GAAG,EAAER;AAJI,KAAb;AAMH;;AAED,QAAMS,QAAN,GAAiB;AACb,UAAMJ,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAA7B;;AACA,QAAIA,SAAJ,EAAe;AAEX,YAAMK,IAAI,GAAG;AACTV,QAAAA,GAAG,EAAEK;AADI,OAAb;AAIA,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA6C;AACrEC,QAAAA,MAAM,EAAE,MAD6D;AAErEC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF4D;AAKrEJ,QAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAL+D,OAA7C,CAA5B;AAQA,YAAMO,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;AAEA,YAAMV,KAAK,GAAGU,IAAI,CAACV,KAAnB;AAEA,YAAMW,cAAc,GAAG,KAAKC,YAAL,CAAkBZ,KAAlB,CAAvB;AAEAa,MAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AAEA,WAAKI,QAAL,CAAc;AACVf,QAAAA,KAAK,EAAEW;AADG,OAAd;AAGH,KAzBD,MAyBO;AACHK,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACH;AAEJ;;AAEDC,EAAAA,YAAY,GAAG;AAEX,UAAMnB,SAAS,GAAG,KAAKD,KAAL,CAAWI,GAAX,CAAeiB,SAAf,CAAyB,kBAAzB,CAAlB;AACA,UAAMnB,UAAU,GAAG,KAAKF,KAAL,CAAWI,GAAX,CAAeiB,SAAf,CAAyB,mBAAzB,CAAnB;AAEA,SAAKH,QAAL,CAAc;AACVjB,MAAAA,SAAS,EAAEA,SADD;AAEVC,MAAAA,UAAU,EAAEA;AAFF,KAAd;AAIH;;AAEDa,EAAAA,YAAY,CAACZ,KAAD,EAAQ;AAChB,WAAO,KAAKH,KAAL,CAAWI,GAAX,CAAekB,aAAf,CAA6BnB,KAA7B,EAAoC,MAApC,CAAP;AACH;;AAIDoB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKvB,KAAL,CAAWC,SAAf,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKE,KAAT,CAFJ,EAGI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,MAAM,KAAKE,QAAL,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,MAAM,KAAKe,YAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJJ,CADJ;AAQH;;AA1E6C","sourcesContent":["import React from 'react'\r\nimport Form from './Form';\r\n\r\nconst NodeRSA = require('node-rsa');\r\n\r\n\r\nexport default class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const key = new NodeRSA().generateKeyPair(512)\r\n        key.setOptions({encryptionScheme: 'pkcs1'});\r\n\r\n        this.state = {\r\n            publicKey: null,\r\n            privateKey: null,\r\n            token: null,\r\n            rsa: key\r\n        }\r\n    }\r\n\r\n    async onSubmit() {\r\n        const publicKey = this.state.publicKey;\r\n        if (publicKey) {\r\n\r\n            const body = {\r\n                key: publicKey\r\n            };\r\n\r\n            const response = await fetch(\"http://localhost:9000/auth/token/request\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            const token = json.token;\r\n\r\n            const decryptedToken = this.decryptToken(token);\r\n\r\n            console.log(decryptedToken);\r\n\r\n            this.setState({\r\n                token: decryptedToken\r\n            });\r\n        } else {\r\n            alert('No public key generated');\r\n        }\r\n\r\n    }\r\n\r\n    generateKeys() {\r\n\r\n        const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\r\n        const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\r\n\r\n        this.setState({\r\n            publicKey: publicKey,\r\n            privateKey: privateKey\r\n        })\r\n    }\r\n\r\n    decryptToken(token) {\r\n        return this.state.rsa.decryptPublic(token, 'utf8');\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.state.publicKey}</p>\r\n                <p>{this.token}</p>\r\n                <Form onSubmit={() => this.onSubmit()} />\r\n                <button type=\"button\" onClick={() => this.generateKeys()}>Generate Keys</button>\r\n            </div >\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}