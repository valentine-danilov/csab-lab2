{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valik\\\\react-apps\\\\cs\\\\lab2-1\\\\src\\\\components\\\\Main.js\";\nimport React from 'react';\nimport Form from './Form';\nimport { encryptAES_CBC } from './AESUtils';\n\nconst NodeRSA = require('node-rsa');\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    const key = new NodeRSA().generateKeyPair(512);\n    key.setOptions({\n      encryptionScheme: 'pkcs1'\n    });\n    this.state = {\n      loggedUser: {\n        login: \"admin\",\n        password: \"\"\n      },\n      publicKey: null,\n      privateKey: null,\n      token: null,\n      iv: null,\n      rsa: key\n    };\n  }\n\n  async onSubmit() {\n    const publicKey = this.state.publicKey;\n\n    if (publicKey) {\n      const body = {\n        key: publicKey\n      };\n      const response = await fetch(\"http://localhost:9000/auth/token/request\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      const json = await response.json();\n      alert(\"Successfully requested encrypted token\");\n      const token = json.token;\n      const iv = json.iv;\n      const decryptedToken = this.decryptToken(token, iv);\n      alert(\"Successfully decrypted token\");\n      this.setState({\n        token: decryptedToken.token,\n        iv: decryptedToken.iv\n      });\n      this.encryptLoginAndPassword();\n      alert(\"Successfully encrypted creds\");\n      let authData = new FormData();\n      authData.append('login', this.state.loggedUser.login);\n      authData.append('password', this.state.loggedUser.password);\n      const authResponse = await fetch(\"http://localhost:9000/auth/login\", {\n        method: \"POST\",\n        body: authData\n      });\n      const responseCode = authResponse.status;\n      alert(\"Login finished with \" + responseCode + \" code\");\n    } else {\n      alert('No public key generated');\n    }\n  }\n\n  generateKeys() {\n    const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\n    const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\n    this.setState({\n      publicKey: publicKey,\n      privateKey: privateKey\n    });\n  }\n\n  decryptToken(token, iv) {\n    const decryptedToken = {\n      token: this.state.rsa.decrypt(token, 'utf-8'),\n      iv: this.state.rsa.decrypt(iv)\n    };\n    return decryptedToken;\n  }\n\n  handleValueChange(event) {\n    event.preventDefault();\n    const inputName = event.target.name;\n    const inputValue = event.target.value;\n    const user = this.state.loggedUser;\n    user[inputName] = inputValue;\n    console.log(inputName + \": \" + user[inputName]);\n    this.setState({\n      loggedUser: user\n    });\n  }\n\n  encryptLoginAndPassword() {\n    let login = this.state.loggedUser.login;\n    let password = this.state.loggedUser.password;\n    let key = this.state.token;\n    let iv = this.state.iv;\n    login = encryptAES_CBC(key, iv, login);\n    password = encryptAES_CBC(key, iv, password);\n    console.log(\"login: \" + login);\n    console.log(\"password: \" + password);\n    this.setState({\n      loggedUser: {\n        login: login,\n        password: password\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.state.publicKey), React.createElement(Form, {\n      onBlur: event => this.handleValueChange(event),\n      onSubmit: () => this.onSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.generateKeys(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Generate Keys\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/valik/react-apps/cs/lab2-1/src/components/Main.js"],"names":["React","Form","encryptAES_CBC","NodeRSA","require","Main","Component","constructor","props","key","generateKeyPair","setOptions","encryptionScheme","state","loggedUser","login","password","publicKey","privateKey","token","iv","rsa","onSubmit","body","response","fetch","method","headers","JSON","stringify","json","alert","decryptedToken","decryptToken","setState","encryptLoginAndPassword","authData","FormData","append","authResponse","responseCode","status","generateKeys","exportKey","decrypt","handleValueChange","event","preventDefault","inputName","target","name","inputValue","value","user","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from './Form';\r\nimport { encryptAES_CBC } from './AESUtils'\r\n\r\nconst NodeRSA = require('node-rsa');\r\n\r\n\r\nexport default class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const key = new NodeRSA().generateKeyPair(512)\r\n        key.setOptions({ encryptionScheme: 'pkcs1' });\r\n\r\n        this.state = {\r\n            loggedUser: {\r\n                login: \"admin\",\r\n                password: \"\",\r\n            },\r\n            publicKey: null,\r\n            privateKey: null,\r\n            token: null,\r\n            iv: null,\r\n            rsa: key\r\n        }\r\n    }\r\n\r\n    async onSubmit() {\r\n\r\n        const publicKey = this.state.publicKey;\r\n        if (publicKey) {\r\n\r\n            const body = {\r\n                key: publicKey\r\n            };\r\n\r\n            const response = await fetch(\"http://localhost:9000/auth/token/request\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            alert(\"Successfully requested encrypted token\");\r\n\r\n            const token = json.token;\r\n            const iv = json.iv;\r\n\r\n            const decryptedToken = this.decryptToken(token, iv);\r\n\r\n            alert(\"Successfully decrypted token\");\r\n\r\n            this.setState({\r\n                token: decryptedToken.token,\r\n                iv: decryptedToken.iv\r\n            });\r\n\r\n            this.encryptLoginAndPassword();\r\n\r\n            alert(\"Successfully encrypted creds\");\r\n\r\n            let authData = new FormData();\r\n            authData.append('login', this.state.loggedUser.login)\r\n            authData.append('password', this.state.loggedUser.password)\r\n\r\n            const authResponse = await fetch(\"http://localhost:9000/auth/login\", {\r\n                method: \"POST\",\r\n                body: authData\r\n            })\r\n\r\n            const responseCode = authResponse.status\r\n\r\n            alert(\"Login finished with \" + responseCode + \" code\")\r\n\r\n        } else {\r\n            alert('No public key generated');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    generateKeys() {\r\n\r\n        const publicKey = this.state.rsa.exportKey(\"pkcs1-public-pem\");\r\n        const privateKey = this.state.rsa.exportKey(\"pkcs8-private-pem\");\r\n\r\n        this.setState({\r\n            publicKey: publicKey,\r\n            privateKey: privateKey\r\n        })\r\n    }\r\n\r\n    decryptToken(token, iv) {\r\n        const decryptedToken = {\r\n            token: this.state.rsa.decrypt(token, 'utf-8'),\r\n            iv: this.state.rsa.decrypt(iv)\r\n        }\r\n        return decryptedToken;\r\n    }\r\n\r\n    handleValueChange(event) {\r\n        event.preventDefault();\r\n        const inputName = event.target.name;\r\n        const inputValue = event.target.value;\r\n\r\n        const user = this.state.loggedUser;\r\n\r\n        user[inputName] = inputValue;\r\n\r\n        console.log(inputName + \": \" + user[inputName])\r\n\r\n        this.setState({\r\n            loggedUser: user\r\n        });\r\n    }\r\n\r\n    encryptLoginAndPassword() {\r\n        let login = this.state.loggedUser.login;\r\n        let password = this.state.loggedUser.password;\r\n        let key = this.state.token;\r\n        let iv = this.state.iv;\r\n\r\n        login = encryptAES_CBC(key, iv, login);\r\n        password = encryptAES_CBC(key, iv, password);\r\n\r\n        console.log(\"login: \" + login);\r\n        console.log(\"password: \" + password);\r\n\r\n        this.setState({\r\n            loggedUser: {\r\n                login: login,\r\n                password: password\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.state.publicKey}</p>\r\n                <Form onBlur={(event) => this.handleValueChange(event)} onSubmit={() => this.onSubmit()} />\r\n                <button type=\"button\" onClick={() => this.generateKeys()}>Generate Keys</button>\r\n            </div >\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}