{"ast":null,"code":"const NodeRSA = require('node-rsa');\n\nexport function generateRSAKeyPair() {\n  const key = new NodeRSA();\n  key.generateKeyPair(512);\n  const publicKey = key.exportKey(\"pkcs1-public-pem\");\n  const privateKey = key.exportKey(\"pkcs8-private-pem\");\n  /* const publicKey = new Buffer(publicKeyDer , 'binary').toString('base64');\r\n  const privateKey = new Buffer(privateKeyDer , 'binary').toString('base64'); */\n\n  const keyPair = {\n    publicKey: publicKey,\n    privateKey: privateKey\n  };\n  return keyPair;\n}\nexport function decryptTokenRSA(encryptedToken) {\n  const key = new NodeRSA({\n    b: 512\n  });\n  const decryptedToken = key.decrypt(encryptedToken, 'utf8');\n  return decryptedToken;\n}","map":{"version":3,"sources":["C:/Users/valik/react-apps/cs/lab2-1/src/components/RSAUtils.js"],"names":["NodeRSA","require","generateRSAKeyPair","key","generateKeyPair","publicKey","exportKey","privateKey","keyPair","decryptTokenRSA","encryptedToken","b","decryptedToken","decrypt"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACjC,QAAMC,GAAG,GAAG,IAAIH,OAAJ,EAAZ;AACAG,EAAAA,GAAG,CAACC,eAAJ,CAAoB,GAApB;AACA,QAAMC,SAAS,GAAGF,GAAG,CAACG,SAAJ,CAAc,kBAAd,CAAlB;AACA,QAAMC,UAAU,GAAGJ,GAAG,CAACG,SAAJ,CAAc,mBAAd,CAAnB;AAEA;;;AAGA,QAAME,OAAO,GAAG;AACZH,IAAAA,SAAS,EAAEA,SADC;AAEZE,IAAAA,UAAU,EAAEA;AAFA,GAAhB;AAKA,SAAOC,OAAP;AACH;AAED,OAAO,SAASC,eAAT,CAAyBC,cAAzB,EAAyC;AAC5C,QAAMP,GAAG,GAAG,IAAIH,OAAJ,CAAY;AAACW,IAAAA,CAAC,EAAC;AAAH,GAAZ,CAAZ;AAEA,QAAMC,cAAc,GAAGT,GAAG,CAACU,OAAJ,CAAYH,cAAZ,EAA4B,MAA5B,CAAvB;AAEA,SAAOE,cAAP;AAEH","sourcesContent":["const NodeRSA = require('node-rsa');\r\n\r\nexport function generateRSAKeyPair() {\r\n    const key = new NodeRSA();\r\n    key.generateKeyPair(512);\r\n    const publicKey = key.exportKey(\"pkcs1-public-pem\");\r\n    const privateKey = key.exportKey(\"pkcs8-private-pem\");\r\n\r\n    /* const publicKey = new Buffer(publicKeyDer , 'binary').toString('base64');\r\n    const privateKey = new Buffer(privateKeyDer , 'binary').toString('base64'); */\r\n\r\n    const keyPair = {\r\n        publicKey: publicKey,\r\n        privateKey: privateKey\r\n    }\r\n\r\n    return keyPair;\r\n}\r\n\r\nexport function decryptTokenRSA(encryptedToken) {\r\n    const key = new NodeRSA({b:512});\r\n\r\n    const decryptedToken = key.decrypt(encryptedToken, 'utf8');\r\n    \r\n    return decryptedToken;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}